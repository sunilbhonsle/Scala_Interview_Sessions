#1. App
#Hello World Program with main class
package session1

object myfirst {

  def main(args: Array[String]) = {
    println("Hello Sunil!")
  }

}

#Hello World Program without main class
#App in scala is a helper class which already have the main method.
#So we can extend our class from App and we can
#skip writing the main method

package session1

object myfirst extends App {
    println("Hello Sunil!")
}

#2. Default args, named args, variable args

#2.1 Default args

package session1

object myfirst extends App {
    println("Hello Sunil!")

  def add(num:Int, incrementBy: Int) = {
    //last line of the code is by default return , no need to write return explicitly
    num+incrementBy
  }
  println(add(5,1))
}

#O/P:
#Hello Sunil!
#6

#we are fixing the increment value and not pasing in the function
package session1

object myfirst extends App {
    println("Hello Sunil!")

  def add(num:Int, incrementBy: Int  =1) = {
    //last line of the code is by default return , no need to write return explicitly
    num+incrementBy
  }
  println(add(5))
}

#Even after defining incrementby value as 1, you pass 7 in the function, #then it will be 7+5 =12

package session1

object myfirst extends App {
    println("Hello Sunil!")

  def add(num:Int, incrementBy: Int  =1) = {
    //last line of the code is by default return , no need to write return explicitly
    num+incrementBy
  }
  println(add(5, 7))
}

#2.2 Named args

# with below code, I want to fixate int value 7, and overwrite 
# incrementby value with 5. But the value 5 that we pass always overwrite #first arg, so 7 will be replaced by 5, and o/p will be 6, to overcome this problem we have named args
#Moreover, it’s always a good idea to put the fix value arg in the end.


package session1

object myfirst extends App {
    println("Hello Sunil!")

  def add(num:Int =7, incrementBy: Int  =1) = {
    //last line of the code is by default return , no need to write return explicitly
    num+incrementBy
  }
  println(add(5))
}

#To overcome above issue, write args name while passing the value, here #it’s incrementBy. o/p will be 12.

package session1

object myfirst extends App {
    println("Hello Sunil!")

  def add(num:Int =7, incrementBy: Int  =1) = {
    //last line of the code is by default return , no need to write return explicitly
    num+incrementBy
  }
  println(add(incrementBy = 5))
}

#2.3 Variable args, String* mean variable length. You can pass any no. of #values. You could have also passed “hi hello I am good xyz”. Here, at #runtimes, we can pass n no. of parameters.


package session1

object myfirst extends App {

  def prntFn(name: String*) = {
    for (i <- name)
      println(i)
  }
  prntFn("hello", "how", "are")
}

#o/p: 
hello
how
are

#3. Difference between Nil, Null, null, None, Nothing, Option, Unit

3.1
Null is a trait in a Scala. There exists only one instance of Null, and that is null.

package session1

object myfirst extends App {

def tryIt(thing:Null): Unit = {println("that worked")}
  tryIt(null)
}

O/P: that worked

null is an instance of Null

We should restrict the use of null as its not preferred, because it can lead to null pointer exceptions.

3.2 
Nil => it’s an empty list

package session1

object myfirst extends App {
val c = Nil
  println(c)
}
o/p: List()

3.3 
Nothing => Nothing is a trait in Scala. There are no instances of Nothing. It literally means nothing. Nothing means that there was an error or exception and nothing was returned.

3.4
Option => Consider you are writing a function and you run into the situation where you don’t have a useful value to return, then what to do? 

Returning null is not preferred because it can lead to null pointer exceptions. 

Scala has a built-in solution to this problem. 

package session1

object myfirst extends App {

  def getAstringMaybe(num: Int): Option[String] = {
    if(num > 0) Some("A Positive No.!")
    else None
  }

  def printResult(num: Int) = {
    getAstringMaybe(num) match {
      case Some(str) => println(str)
      case None => println("No String!")
    }
  }
  printResult(10)
}

o/p: A Positive No.!

Here, we have handled None value gracefully. And, we don’t need to deal with nulls. None is better choice. So, Option provides you ‘Some’ or ‘None’. And, it’s a very good choice to replace nulls.

Int. Que: How do you deal with nulls? Using Option. Don’t use Null in code, rather use Option.

3.5 Unit
Unit is a type of a method that doesn’t return a value. It’s like a void in java to some extent. It’s represented by ().

// Nothing means that there was an error and nothing was returned
// Unit means that there are side effects




package session1

object myfirst extends App {

def funcNew = {
  println("Hello World")
}
}

Println is a side effect, it returns Unit.

#4. How to deal with null in your Scala code?

Some fields are mandatory, whereas some fields are optional.


The below code gives null pointer exception. _ mean null. The below code is a wrong way of writing the code.


package session1

object myfirst extends App {

  // Address and User fields are mandatory whereas firstname, lastname and address are optional
case class Address (city: String, password: String)
  class User(email: String, password: String)
  {
    var firstName: String = _
    var lastname: String = _
    var address: Address = _
  }

  val usr = new User("xyz@gmail.com", "abcd")
  println(usr.firstName.length)
Below is the correct approach.


Option[String] gives None, not null. It helps to avoid nullpointerexception.

We can handle none using GetOrElse()












package session1

object myfirst extends App {

  // Address and User fields are mandatory whereas firstname, lastname and address are optional
case class Address (city: String, password: String)
  class User(email: String, password: String)
  {
    var firstName: Option[String] = None
    var lastname: Option[String] = Some("Sumit")
    var address: Option[Address] = None
  }

  val usr = new User("xyz@gmail.com", "abcd")
  println(usr.firstName.getOrElse("<not assigned>"))
  println(usr.lastname.getOrElse("<not assigned>"))
}

O/P:

<not assigned>
Sumit
